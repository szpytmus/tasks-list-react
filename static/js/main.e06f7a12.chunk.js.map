{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/taskLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","App.js","serviceWorker.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Button","button","teal","white","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","selectTasksState","actions","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","focusInput","current","focus","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","content","nanoid","Input","value","ref","placeholder","onChange","target","onClick","List","ul","Item","li","alto","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","key","to","Wrapper","div","Buttons","areTasksEmpty","isEveryTaskDone","Fragment","disabled","StyledSection","section","StyledSectionHeader","header","StyledSectionTitle","h2","StyledSectionDiv","Section","title","body","extraHeaderContent","Header","main","Container","children","history","useHistory","searchParams","delete","set","pathname","toString","TasksPage","Search","TaskPage","useParams","find","getTaskById","StyledNavLink","NavLink","attrs","activeClassName","path","AuthorPage","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","silver","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e06f7a12.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml{\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Lato', sans-serif;\r\n  background: ${({ theme }) => theme.color.gallery};\r\n  font-size: 16px;\r\n  padding: 10px;\r\n}\r\n\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledForm = styled.form`\r\n    margin: 20px;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap:20px;  \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 50px;\r\n    font-size: 20px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    padding: 15px;\r\n    transition: 2s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    &:hover{\r\n    background-color: hsl(180, 100%, 45%);\r\n    transform: scale(1.2);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './taskLocalStorage';\r\n\r\nconst tasksSlice = createSlice ({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) =>{\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach((task) => {\r\n                task.done = true;\r\n            })\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, {payload:tasks}) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone, fetchExampleTasks, setTasks } = tasksSlice.actions;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every (({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) =>{\r\n\r\n    const tasks = selectTasks(state);\r\n\r\n    if(!query || query.trim() === \"\"){\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) => \r\n    content.toUpperCase().includes(query.trim().toUpperCase()))  \r\n}\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    height: 50px;\r\n    border: 3px solid #eee;\r\n    padding-left: 10px;\r\n    margin-right: 20px;  \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-right: 0;\r\n        margin-bottom: 10px;\r\n        width: 100%;\r\n    }\r\n\r\n`;\r\n\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport {StyledForm, Button} from './styled';\r\nimport { addTask } from '../../tasksSlice';\r\nimport Input from \"../../Input\";\r\n\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n\r\n        if(newTaskContentTrimmed === \"\"){\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimmed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n\r\n    return ((\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                placeholder=\"Anything to do?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Add task\r\n            </Button>\r\n        </StyledForm>\r\n    ))\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding:10px;\r\n    margin: 0;\r\n    margin-top:10px;\r\n\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid ${({ theme }) => theme.color.gallery};\r\n    display:grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap:10px;\r\n    align-items:center;\r\n    padding:10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    flex-grow: 1;\r\n    margin: 0 10px; \r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n        &:hover{\r\n        filter:brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n        &:hover{\r\n        filter:brightness(120%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { List, Item, Content, Button } from './styled';\r\nimport { selectTasksByQuery, toggleTaskDone, removeTask, selectHideDone } from '../../tasksSlice';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\n\r\n\r\nconst TaskList = () => {\r\n\r\n  const location = useLocation();\r\n  const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  \r\n  return (\r\n    <List >\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <Link to={`/tasks/${task.id}`}> {task.content} </Link>\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n           🗑\r\n          </Button>\r\n        </Item>))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;","export default \"search\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background:transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border:none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    padding: 15px;\r\n\r\n    &:hover{\r\n    transform:scale(1.1);\r\n    transition: 1s;\r\n    background-color: hsl(180, 100%, 45%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;  \r\n    }\r\n\r\n    &:disabled{\r\n    background:transparent;\r\n    color: hsl(180, 1%, 75%);\r\n    border:none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s; \r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Wrapper, Button} from './styled'\r\nimport { toggleHideDone, setAllDone, selectAreTasksEmpty, selectIsEveryTaskDone, selectHideDone, fetchExampleTasks } from '../../tasksSlice';\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    \r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Wrapper>\r\n            <Button onClick= { () =>  dispatch( fetchExampleTasks())}>\r\n                Show exemplary Tasks\r\n            </Button>\r\n            {!areTasksEmpty && (\r\n                <React.Fragment>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Show\" : \"Hide\"} Done\r\n                </Button>\r\n                    <Button\r\n                        disabled = {isEveryTaskDone}\r\n                        onClick={() => dispatch(setAllDone())}>\r\n                        All tasks done!\r\n                </Button>\r\n                </React.Fragment>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    border-bottom:1px solid #ddd;\r\n    display:grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items:center;\r\n    padding: 30px;\r\n    margin-top:10px;\r\n`;\r\n\r\nexport const StyledSectionTitle = styled.h2`\r\n    font-size:20px;\r\n    margin-top:10px;\r\n    margin-bottom:10px;\r\n`;\r\n\r\nexport const StyledSectionDiv = styled.div`\r\n     padding:20px;\r\n`;\r\n\r\n","import React from 'react';\r\nimport { StyledSection, StyledSectionHeader, StyledSectionTitle, StyledSectionDiv} from './styled.js'\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <StyledSection>\r\n        <StyledSectionHeader >\r\n            <StyledSectionTitle>{title}</StyledSectionTitle>\r\n            {extraHeaderContent}\r\n        </StyledSectionHeader>\r\n        <StyledSectionDiv>\r\n            {body}\r\n        </StyledSectionDiv>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\n\r\n\r\nconst Header = ({title}) => (\r\n\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.main`\r\n    width: 1000px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from './styled'\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay:grid;\r\ngrid-template-columns: 1fr;\r\n`","import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport Input from '../../Input';\r\nimport searchQueryParamName from '../searchQueryParamName';\r\nimport { Wrapper } from './styled';\r\n\r\nexport default () => {\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n    \r\n\r\n    const onTaskFilterChange = ({target}) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if(target.value.trim() === \"\"){\r\n            searchParams.delete(searchQueryParamName);\r\n        } else {\r\n            searchParams.set(searchQueryParamName, target.value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n        <Input\r\n            placeholder=\"Filter\"\r\n            value = {query || \"\"}\r\n            onChange={onTaskFilterChange}\r\n        />\r\n        </Wrapper>\r\n    );\r\n};","import React from 'react';\nimport Form from \"./Form\"\nimport TaskList from \"./TaskList\"\nimport Buttons from \"./Buttons\"\nimport Section from \"../../../common/Section\"\nimport Header from \"../../../common/Header\"\nimport Container from \"../../../common/Container\"\nimport Search from \"./Search\"\n\n\n\nfunction TasksPage() {\n\n  return (\n    <Container>\n      \n      <Header title=\"Tasks List\" />\n\n      <Section\n        title=\"Add new task\"\n        body={<Form />}\n      />\n\n      <Section\n        title=\"Search:\"\n        body={<Search />}\n      />\n\n      <Section\n        title=\"Tasks List\"\n        body={\n          <TaskList/>\n        }\n        extraHeaderContent={\n          <Buttons/>\n        }\n      />\n\n    </Container>\n\n  );\n}\n\nexport default TasksPage;\n","import React from 'react';\r\nimport Section from \"../../../common/Section\"\r\nimport Header from \"../../../common/Header\"\r\nimport Container from \"../../../common/Container\"\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n      <Container>\r\n        <Header title=\"About Task\" />\r\n        <Section\r\n          title={ task ? task.content : \"Couldn't find this task 😥 \"}\r\n          body={<><strong>Ukończono: </strong> {task.done ? \"Yes\" : \"No\"} </>}\r\n        />\r\n      </Container>\r\n  \r\n    );\r\n  }\r\n  \r\n  export default TaskPage;\r\n  ","import React from 'react';\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n\r\n    <Container>\r\n        <Header title=\"About Author\" />\r\n        <Section\r\n        title=\"Marcin Szpytma\"\r\n        body={<>nnananannaa</>}\r\n        />\r\n    </Container>\r\n\r\n);","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    &.${activeClassName} {\r\n        color: red;\r\n    }\r\n`","import React from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport TasksPage from './features/tasks/TasksPage';\r\nimport TaskPage from './features/tasks/TaskPage';\r\nimport AuthorPage from './features/author/AuthorPage';\r\nimport { StyledNavLink } from './styled';\r\n\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <StyledNavLink activeClassName=\"active\" to=\"/tasks\"> Tasks</StyledNavLink>\r\n                </li>\r\n                <li>\r\n                    <StyledNavLink activeClassName=\"active\" to=\"/author\"> About Author</StyledNavLink>\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                <Route path=\"/tasks/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/tasks\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/author\">\r\n                    <AuthorPage/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/tasks\"/>\r\n                </Route>\r\n                \r\n            </Switch>\r\n        </nav>\r\n    \r\n    </HashRouter>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/tasks-list-react/exampleTasks.json\")\r\n\r\n    if (!response.ok){\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, delay, takeEvery, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./taskLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try{\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong!!!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler(){\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from 'redux-saga/effects';\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store =  configureStore ({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport { GlobalStyle } from './GlobalStyle'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store  from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n    </Provider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        black : \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}