{"version":3,"sources":["Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","className","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","value","ref","placeholder","onChange","target","onClick","current","focus","List","styled","ul","Item","li","hidden","css","Content","span","done","Button","button","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","content","Buttons","toggleHideDone","setAllDone","length","Fragment","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4b5b770.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n\r\n        if(newTaskContentTrimmed === \"\"){\r\n            return;\r\n        }\r\n\r\n        addNewTask(newTaskContentTrimmed);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n\r\n    return ((\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                className=\"form__input\"\r\n                placeholder=\"Anything to do?\"\r\n                \r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n            <button\r\n                className=\"form__button\"\r\n                onClick={focusInput}\r\n            >\r\n                Add task\r\n            </button>\r\n        </form>\r\n    ))\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding:10px;\r\n    margin: 0;\r\n    margin-top:10px;\r\n\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid #eee;\r\n    display:grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap:10px;\r\n    align-items:center;\r\n    padding:10px;\r\n    border-bottom: 1px solid #ddd;\r\n    \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    flex-grow: 1;\r\n    margin: 0 10px; \r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background:hsl(120, 61%, 34%);\r\n        &:hover{\r\n        background:hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background:hsl(348, 83%, 47%);\r\n        &:hover{\r\n        background:hsl(120, 61%, 52%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from './styled';\r\n\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <List className=\"tasksList\">\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button\r\n          toggleDone\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}> {task.content}</Content>\r\n        <Button\r\n          remove\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n         ðŸ—‘\r\n        </Button>\r\n      </Item>))}\r\n  </List>\r\n)\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <React.Fragment>\r\n                <button onClick={toggleHideDone}\r\n                    className=\"buttons__button\">\r\n                    {hideDone ? \"Show\" : \"Hide\"} Done\r\n            </button>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={setAllDone}>\r\n                    All tasks done!\r\n            </button>\r\n            </React.Fragment>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\n\r\n\r\nconst Header = ({title}) => (\r\n\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Container = ({children}) => (\r\n    <main className = \"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\"\nimport Tasks from \"./Tasks\"\nimport Buttons from \"./Buttons\"\nimport Section from \"./Section\"\nimport Header from \"./Header\"\nimport Container from \"./Container\"\n\nconst getInitialTasks = () => {\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n  return tasksFromLocalStorage\n    ? JSON.parse(tasksFromLocalStorage)\n    : [];\n}\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n\n  };\n\n  const toggleTaskDone = (id) => {\n\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }))\n\n  };\n\n  const setAllDone = () => {\n\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true\n    })));\n\n  };\n\n  const addNewTask = (newTaskContent) => {\n\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n\n      }\n    ])\n\n  };\n\n  return (\n    <Container>\n\n      <Header title=\"Tasks List\" />\n\n      <Section\n        title=\"Add new task\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n\n      <Section\n        title=\"Tasks List\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone} />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone} />\n        }\n      />\n\n    </Container>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}