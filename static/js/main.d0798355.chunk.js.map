{"version":3,"sources":["GlobalStyle.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","useTasks.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","Button","button","teal","white","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","value","ref","placeholder","onChange","target","onClick","List","ul","Item","li","alto","hidden","css","Content","span","done","toggleDone","forestGreen","remove","crimson","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","content","Wrapper","div","Buttons","toggleHideDone","setAllDone","length","Fragment","disabled","every","StyledSection","section","StyledSectionHeader","header","StyledSectionTitle","h2","StyledSectionDiv","Section","title","body","extraHeaderContent","Header","main","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","black","silver","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0798355.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml{\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: 'Lato', sans-serif;\r\n  background: ${({ theme }) => theme.color.gallery};\r\n  font-size: 16px;\r\n  padding: 10px;\r\n}\r\n\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledForm = styled.form`\r\n    margin: 20px;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap:20px;  \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    height: 50px;\r\n    border: 3px solid #eee;\r\n    padding-left: 10px;\r\n    margin-right: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-right: 0;\r\n        margin-bottom: 10px;\r\n        width: 100%;\r\n    }\r\n\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    height: 50px;\r\n    font-size: 20px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    padding: 15px;\r\n    transition: 2s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    &:hover{\r\n    background-color: hsl(180, 100%, 45%);\r\n    transform: scale(1.2);\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport {StyledForm, Input, Button} from './styled';\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n\r\n        if(newTaskContentTrimmed === \"\"){\r\n            return;\r\n        }\r\n\r\n        addNewTask(newTaskContentTrimmed);\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n\r\n    return ((\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                placeholder=\"Anything to do?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n            <Button\r\n                onClick={focusInput}\r\n            >\r\n                Add task\r\n            </Button>\r\n        </StyledForm>\r\n    ))\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding:10px;\r\n    margin: 0;\r\n    margin-top:10px;\r\n\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid ${({ theme }) => theme.color.gallery};\r\n    display:grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap:10px;\r\n    align-items:center;\r\n    padding:10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    flex-grow: 1;\r\n    margin: 0 10px; \r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};\r\n        &:hover{\r\n        filter:brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n        &:hover{\r\n        filter:brightness(120%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from './styled';\r\n\r\n\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <List >\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button\r\n          toggleDone\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"✔\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}> {task.content}</Content>\r\n        <Button\r\n          remove\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n         🗑\r\n        </Button>\r\n      </Item>))}\r\n  </List>\r\n)\r\n\r\nexport default Tasks;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background:transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border:none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n    padding: 15px;\r\n\r\n    &:hover{\r\n    transform:scale(1.1);\r\n    transition: 1s;\r\n    background-color: hsl(180, 100%, 45%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;  \r\n    }\r\n\r\n    &:disabled{\r\n    background:transparent;\r\n    color: hsl(180, 1%, 75%);\r\n    border:none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s; \r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport { Wrapper, Button} from './styled'\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n\r\n    <Wrapper>\r\n        {tasks.length > 0 && (\r\n            <React.Fragment>\r\n                <Button onClick={toggleHideDone}>\r\n                    {hideDone ? \"Show\" : \"Hide\"} Done\r\n            </Button>\r\n                <Button\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={setAllDone}>\r\n                    All tasks done!\r\n            </Button>\r\n            </React.Fragment>\r\n        )}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    border-bottom:1px solid #ddd;\r\n    display:grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items:center;\r\n    padding: 30px;\r\n    margin-top:10px;\r\n`;\r\n\r\nexport const StyledSectionTitle = styled.h2`\r\n    font-size:20px;\r\n    margin-top:10px;\r\n    margin-bottom:10px;\r\n`;\r\n\r\nexport const StyledSectionDiv = styled.div`\r\n     padding:20px;\r\n`;\r\n\r\n","import React from 'react';\r\nimport { StyledSection, StyledSectionHeader, StyledSectionTitle, StyledSectionDiv} from './styled.js'\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <StyledSection>\r\n        <StyledSectionHeader >\r\n            <StyledSectionTitle>{title}</StyledSectionTitle>\r\n            {extraHeaderContent}\r\n        </StyledSectionHeader>\r\n        <StyledSectionDiv>\r\n            {body}\r\n        </StyledSectionDiv>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\n\r\n\r\nconst Header = ({title}) => (\r\n\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.main`\r\n    width: 1000px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from './styled'\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import { useEffect, useState} from 'react';\r\n\r\nconst getInitialTasks = () => {\r\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n  return tasksFromLocalStorage\r\n    ? JSON.parse(tasksFromLocalStorage)\r\n    : [];\r\n};\r\n\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n    \r\n    \r\n      useEffect(() => {\r\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n      }, [tasks]);\r\n\r\n    \r\n      const removeTask = (id) => {\r\n    \r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    \r\n      };\r\n    \r\n      const toggleTaskDone = (id) => {\r\n    \r\n        setTasks(tasks => tasks.map(task => {\r\n          if (task.id === id) {\r\n            return { ...task, done: !task.done };\r\n          }\r\n    \r\n          return task;\r\n        }))\r\n    \r\n      };\r\n    \r\n      const setAllDone = () => {\r\n    \r\n        setTasks(tasks => tasks.map(task => ({\r\n          ...task,\r\n          done: true\r\n        })));\r\n    \r\n      };\r\n    \r\n      const addNewTask = (newTaskContent) => {\r\n    \r\n        setTasks(tasks => [\r\n          ...tasks,\r\n          {\r\n            content: newTaskContent,\r\n            done: false,\r\n            id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n    \r\n          }\r\n        ])\r\n    \r\n      };\r\n\r\n    return {\r\n    tasks, \r\n    addNewTask, \r\n    setAllDone, \r\n    toggleTaskDone,  \r\n    removeTask,\r\n    };\r\n\r\n};","import React, { useState } from 'react';\nimport Form from \"./Form\"\nimport Tasks from \"./Tasks\"\nimport Buttons from \"./Buttons\"\nimport Section from \"./Section\"\nimport Header from \"./Header\"\nimport Container from \"./Container\"\nimport { useTasks } from './useTasks.js'\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const { \n    tasks,\n    addNewTask, \n    setAllDone, \n    toggleTaskDone,  \n    removeTask,\n  } = useTasks();\n\n\n  return (\n    <Container>\n\n      <Header title=\"Tasks List\" />\n\n      <Section\n        title=\"Add new task\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n\n      <Section\n        title=\"Tasks List\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone} />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone} />\n        }\n      />\n\n    </Container>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyle } from './GlobalStyle'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n    color: {\r\n        black : \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}